function getUpsModule(){try{return require("./lib/"+process.platform+"-"+process.arch+"/ipsae.node")}catch(e){return console.error(e),null}}module.exports=function(e){"use strict";e.nodes.registerType("atipsae",function(t){e.nodes.createNode(this,t);var a=getUpsModule();this.serial=t.serial;var l=this;function r(e){var t={serial:l.serial,payload:e};l.send([t,null,null])}function s(e){try{var t={serial:l.serial,payload:JSON.parse(e)};l.send([null,t,null])}catch(t){l.error(t.message,e)}}""!==l.serial&&null!=a&&a.start(l.serial,r,s),null!=a&&(a.getSerialStatus()?l.status({fill:"green",shape:"dot",text:"Comport:Avaliable"}):l.status({fill:"red",shape:"ring",text:"Comport:Not avaliable"})),this.on("input",function(e){var t="",o={};if(null!=a)if(e.payload.port)a.bye(),l.serial=e.payload.port,a.start(e.payload.port,r,s),a.getSerialStatus()?l.status({fill:"green",shape:"dot",text:"Comport: Avaliable"}):l.status({fill:"red",shape:"ring",text:"Comport: Not avaliable"});else{if(!a.getSerialStatus())return void l.warn("UPS is not connected. Please connect it first.");e.payload.UPSDCinLostDelayTime?t=a.setDCinLostDelayTime(parseInt(e.payload.UPSDCinLostDelayTime,10)):e.payload.UPSDCoutCutOffDelayTime&&(t=a.setDCoutCutOffDelayTime(parseInt(e.payload.UPSDCoutCutOffDelayTime,10))),""===t&&(t="error"),o.payload="UPS: "+t,l.send([null,null,o])}else o.payload="UPS: load module error",l.send([null,null,o])}),this.on("close",function(){null!=a&&a.bye()})})};
